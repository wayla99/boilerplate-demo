// Package system_spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package system_spec

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Check system liveliness
	// (GET /liveliness)
	GetLiveliness(c *fiber.Ctx) error
	// Check system liveness
	// (GET /liveness)
	GetLiveness(c *fiber.Ctx) error
	// Check system readiness
	// (GET /readiness)
	GetReadiness(c *fiber.Ctx) error
	// Get the system version
	// (GET /version)
	GetVersion(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetLiveliness operation middleware
func (siw *ServerInterfaceWrapper) GetLiveliness(c *fiber.Ctx) error {

	return siw.Handler.GetLiveliness(c)
}

// GetLiveness operation middleware
func (siw *ServerInterfaceWrapper) GetLiveness(c *fiber.Ctx) error {

	return siw.Handler.GetLiveness(c)
}

// GetReadiness operation middleware
func (siw *ServerInterfaceWrapper) GetReadiness(c *fiber.Ctx) error {

	return siw.Handler.GetReadiness(c)
}

// GetVersion operation middleware
func (siw *ServerInterfaceWrapper) GetVersion(c *fiber.Ctx) error {

	return siw.Handler.GetVersion(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Get(options.BaseURL+"/liveliness", wrapper.GetLiveliness)

	router.Get(options.BaseURL+"/liveness", wrapper.GetLiveness)

	router.Get(options.BaseURL+"/readiness", wrapper.GetReadiness)

	router.Get(options.BaseURL+"/version", wrapper.GetVersion)

}

type GetLivelinessRequestObject struct {
}

type GetLivelinessResponseObject interface {
	VisitGetLivelinessResponse(ctx *fiber.Ctx) error
}

type GetLiveliness200TextResponse string

func (response GetLiveliness200TextResponse) VisitGetLivelinessResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

type GetLivenessRequestObject struct {
}

type GetLivenessResponseObject interface {
	VisitGetLivenessResponse(ctx *fiber.Ctx) error
}

type GetLiveness200TextResponse string

func (response GetLiveness200TextResponse) VisitGetLivenessResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

type GetReadinessRequestObject struct {
}

type GetReadinessResponseObject interface {
	VisitGetReadinessResponse(ctx *fiber.Ctx) error
}

type GetReadiness200TextResponse string

func (response GetReadiness200TextResponse) VisitGetReadinessResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

type GetReadiness500Response struct {
}

func (response GetReadiness500Response) VisitGetReadinessResponse(ctx *fiber.Ctx) error {
	ctx.Status(500)
	return nil
}

type GetVersionRequestObject struct {
}

type GetVersionResponseObject interface {
	VisitGetVersionResponse(ctx *fiber.Ctx) error
}

type GetVersion200TextResponse string

func (response GetVersion200TextResponse) VisitGetVersionResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Check system liveliness
	// (GET /liveliness)
	GetLiveliness(ctx context.Context, request GetLivelinessRequestObject) (GetLivelinessResponseObject, error)
	// Check system liveness
	// (GET /liveness)
	GetLiveness(ctx context.Context, request GetLivenessRequestObject) (GetLivenessResponseObject, error)
	// Check system readiness
	// (GET /readiness)
	GetReadiness(ctx context.Context, request GetReadinessRequestObject) (GetReadinessResponseObject, error)
	// Get the system version
	// (GET /version)
	GetVersion(ctx context.Context, request GetVersionRequestObject) (GetVersionResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetLiveliness operation middleware
func (sh *strictHandler) GetLiveliness(ctx *fiber.Ctx) error {
	var request GetLivelinessRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetLiveliness(ctx.UserContext(), request.(GetLivelinessRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLiveliness")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetLivelinessResponseObject); ok {
		if err := validResponse.VisitGetLivelinessResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetLiveness operation middleware
func (sh *strictHandler) GetLiveness(ctx *fiber.Ctx) error {
	var request GetLivenessRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetLiveness(ctx.UserContext(), request.(GetLivenessRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLiveness")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetLivenessResponseObject); ok {
		if err := validResponse.VisitGetLivenessResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetReadiness operation middleware
func (sh *strictHandler) GetReadiness(ctx *fiber.Ctx) error {
	var request GetReadinessRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetReadiness(ctx.UserContext(), request.(GetReadinessRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetReadiness")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetReadinessResponseObject); ok {
		if err := validResponse.VisitGetReadinessResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetVersion operation middleware
func (sh *strictHandler) GetVersion(ctx *fiber.Ctx) error {
	var request GetVersionRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetVersion(ctx.UserContext(), request.(GetVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVersion")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetVersionResponseObject); ok {
		if err := validResponse.VisitGetVersionResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8SSz0s7MRDF/5VlzqHd71e85CpSioJgwXvYPrvB3UmYTIul5H+XpLarB39c1NMwL2+G",
	"z0tyIM+PgeyB1OsAsrTaJ8XYSNgqyNAOknxgsvRv1s5ayoZCBLvoydJFlQxFp30qS+aD32HwjFTbDbSU",
	"ECFOfeDlmiwtoLeTy5AgxcAJdeJ/25bSBVZwHVY86zwOznPpUtdjdFXfx4KbVDxvKOdsaI3UiY965L27",
	"oSKm7Tg62ZOlqx7dU5OO+d6AFlcF/w72n0NPyAK3/vKq78+mn4U2dHlc+P5oyQphNzQryA7SXIsE+Szi",
	"FKpmPH+/jxM+vFp+8VEW0EZ7nJhPkDnn/BIAAP//7CAf4VEDAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
